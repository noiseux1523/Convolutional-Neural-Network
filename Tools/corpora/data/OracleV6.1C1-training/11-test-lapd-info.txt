FUNCTION SPECIFIER private TYPE void NAME void NAME to exponential format PARAMETER LIST int first digit int dec point PARAMETER int first digit TYPE int NAME int NAME first digit PARAMETER int dec point TYPE int NAME int NAME dec point BLOCK IF if end first digit insert decimal point if more than one digit was produced int dot first digit system arraycopy chars dot chars dot end dot chars dot end CONDITION end first digit EXPR end first digit NAME end NAME first digit THEN insert decimal point if more than one digit was produced int dot first digit system arraycopy chars dot chars dot end dot chars dot end BLOCK COMMENT insert decimal point if more than one digit was produced DECL STMT TYPE int NAME int NAME dot INIT first digit EXPR first digit NAME first digit EXPR system arraycopy chars dot chars dot end dot CALL system arraycopy chars dot chars dot end dot NAME system arraycopy NAME system NAME arraycopy ARGUMENT LIST ARGUMENT EXPR chars NAME chars ARGUMENT EXPR dot NAME dot ARGUMENT EXPR chars NAME chars ARGUMENT EXPR dot NAME dot ARGUMENT EXPR end dot NAME end NAME dot EXPR chars dot NAME chars dot NAME chars INDEX dot EXPR dot NAME dot EXPR end NAME end EXPR chars end e NAME chars end NAME chars INDEX end EXPR end NAME end DECL STMT TYPE char NAME char NAME sign INIT EXPR DECL STMT TYPE int NAME int NAME exp INIT dec point EXPR dec point NAME dec point IF if exp sign exp exp CONDITION exp EXPR exp NAME exp THEN sign exp exp BLOCK EXPR sign NAME sign EXPR exp exp NAME exp NAME exp EXPR chars end sign NAME chars end NAME chars INDEX end EXPR end NAME end NAME sign DECL STMT TYPE int NAME int NAME char pos INIT exp end exp end end EXPR exp end exp end end TERNARY exp end exp end end CONDITION exp EXPR exp NAME exp THEN end EXPR end NAME end ELSE exp end end EXPR exp end end TERNARY exp end end CONDITION exp EXPR exp NAME exp THEN end EXPR end NAME end ELSE end EXPR end NAME end EXPR end char pos NAME end NAME char pos COMMENT code below is needed because integer get chars is not public FOR for int r exp chars char pos digits r exp exp if exp break CONTROL INIT CONDITION INCR BLOCK DECL STMT TYPE int NAME int NAME r INIT exp EXPR exp NAME exp EXPR chars char pos digits r NAME chars char pos NAME chars INDEX char pos EXPR char pos NAME char pos NAME digits r NAME digits INDEX r EXPR r NAME r EXPR exp exp NAME exp NAME exp IF if exp break CONDITION exp EXPR exp NAME exp THEN break BLOCK BREAK break private JJ void NN to TO exponential JJ format NN root ROOT format case format to amod format exponential int NN first RB digit NN root ROOT digit advmod digit first int NN dec NN point NN root ROOT point compound point dec if IN end NN first RB digit NN root ROOT digit advmod digit first insert decimal point if more than one digit was produced root ROOT point compound point insert amod point decimal mark produced if advmod one more mwe more than nummod digit one nsubjpass produced digit auxpass produced was dep point produced int NN dot NN first RB digit NN root ROOT digit advmod digit first system NN arraycopy NN root ROOT arraycopy compound arraycopy system chars NNS dot NN chars NNS dot NN end NN dot NN chars NNS dot NN end NN chars NNS end NN e SYM char NN sign NN int NN exp NN dec NN point NN root ROOT point compound point dec if IN exp NN sign NN exp NN exp NN chars NNS end NN sign NN int NN char NN pos NNS root ROOT pos compound pos char exp NN end NN exp NN end NN end NN end NN char NN pos NNS root ROOT pos compound pos char code below is needed because integer get chars is not public root ROOT needed nsubjpass needed code advmod code below auxpass needed is mark get because nsubj get integer csubj public get dobj get chars cop public is neg public not ccomp needed public for IN int NN r NN exp NN chars NNS char NN pos NNS root ROOT pos compound pos char digits NNS r NN exp NN exp NN if IN exp NN break NN end break ANTONYM ANTONYM end produced ANTONYM ANTONYM point sign ANTONYM ANTONYM private public ANTONYM ANTONYM produced break ANTONYM ANTONYM,1
