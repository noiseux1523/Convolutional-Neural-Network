COMMENT checks to see if this term is valid at code position code param position to check against valid term positions return true iff this term is a hit at this position FUNCTION SPECIFIER public TYPE boolean NAME boolean NAME check position PARAMETER LIST int position PARAMETER int position TYPE int NAME int NAME position BLOCK COMMENT there would probably be a slight speed improvement if position spans COMMENT where kept in some sort of priority queue that way this method COMMENT could COMMENT bail early without checking each position span DECL STMT TYPE iterator position span NAME iterator position span NAME iterator ARGUMENT LIST ARGUMENT NAME position span NAME position span it INIT position spans iterator EXPR position spans iterator CALL position spans iterator NAME position spans iterator NAME position spans NAME iterator ARGUMENT LIST WHILE while position span it has next position span pos span position span it next if position pos span start position pos span end return true CONDITION position span it has next EXPR position span it has next CALL position span it has next NAME position span it has next NAME position span it NAME has next ARGUMENT LIST BLOCK DECL STMT TYPE position span NAME position span NAME pos span INIT position span it next EXPR position span it next CALL position span it next NAME position span it next NAME position span it NAME next ARGUMENT LIST IF if position pos span start position pos span end return true CONDITION position pos span start position pos span end EXPR position pos span start position pos span end NAME position NAME pos span start NAME pos span NAME start NAME position NAME pos span end NAME pos span NAME end THEN return true BLOCK RETURN return true EXPR true RETURN return false EXPR false checks to see if this term is valid at code position code root ROOT checks mark see to acl to checks see mark valid if det term this nsubj valid term cop valid is advcl if see valid case code at compound code code compound code position nmod at valid code param position root ROOT position compound position param to check against valid term positions root ROOT check mark check to case positions against amod positions valid compound positions term nmod against check positions return true iff this term is a hit at this position root ROOT hit compound term return amod term true advmod term iff det term this nsubj hit term cop hit is det hit a case position at det position this nmod at hit position public NN boolean NN check NN position NN root ROOT position compound position check int NN position NN there would probably be a slight speed improvement if position spans root ROOT improvement nsubj improvement there aux improvement would advmod improvement probably cop improvement be det improvement a amod improvement slight compound improvement speed case spans if compound spans position nmod if improvement spans where kept in some sort of priority queue that way this method root ROOT kept advmod kept where case sort in det sort some nmod in kept sort case queue of compound queue priority nmod of sort queue det way that dep kept way det method this dep way method could bail early without checking each position span root ROOT bail advmod checking early mark checking without acl without bail checking det position each nsubj span position ccomp checking span iterator NN position NN span NN root ROOT span compound span position position NN span NN it PRP root ROOT span compound span position dep span it position NN spans VBZ iterator NN root ROOT spans nsubj spans position dobj spans iterator while IN position NN span NN it PRP has VBZ next JJ root ROOT span compound span position nsubj has it acl relcl span has advmod has next position NN span NN root ROOT span compound span position pos NNS span VBP root ROOT span nsubj span pos position NN span NN it PRP next IN root ROOT span compound span position dep span it det it next if IN position NN pos NNS span VBP start NN root ROOT span nsubj span pos dobj span start position NN pos NNS span VBP end NN root ROOT span nsubj span pos dobj span end return NN true JJ return NN false JJ check end ANTONYM ANTONYM check hit ANTONYM ANTONYM check kept ANTONYM ANTONYM check return ANTONYM ANTONYM checking end ANTONYM ANTONYM checks end ANTONYM ANTONYM checks hit ANTONYM ANTONYM checks kept ANTONYM ANTONYM checks return ANTONYM ANTONYM hit checking ANTONYM ANTONYM kept checking ANTONYM ANTONYM return checking ANTONYM ANTONYM see hit ANTONYM ANTONYM some each ANTONYM ANTONYM speed check ANTONYM ANTONYM speed checking ANTONYM ANTONYM speed checks ANTONYM ANTONYM start check ANTONYM ANTONYM start checking ANTONYM ANTONYM start checks ANTONYM ANTONYM start end ANTONYM ANTONYM start end ANTONYM ANTONYM true false ANTONYM ANTONYM valid false ANTONYM ANTONYM in next SYNONYM SYNONYM,0
