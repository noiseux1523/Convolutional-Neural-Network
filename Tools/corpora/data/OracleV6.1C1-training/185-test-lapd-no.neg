FUNCTION SPECIFIER public TYPE void NAME void NAME start bundle PARAMETER LIST BLOCK COMMENT this can contain user code wrap it in case it throws an exception TRY try invoker invoke start bundle new do fn start bundle context catch throwable t exception in user code throw wrap user code exception t BLOCK EXPR invoker invoke start bundle new do fn start bundle context CALL invoker invoke start bundle new do fn start bundle context NAME invoker invoke start bundle NAME invoker NAME invoke start bundle ARGUMENT LIST ARGUMENT EXPR new do fn start bundle context CALL do fn start bundle context NAME do fn start bundle context ARGUMENT LIST CATCH catch throwable t exception in user code throw wrap user code exception t PARAMETER LIST throwable t PARAMETER throwable t TYPE throwable NAME throwable NAME t BLOCK COMMENT exception in user code THROW throw wrap user code exception t EXPR wrap user code exception t CALL wrap user code exception t NAME wrap user code exception ARGUMENT LIST ARGUMENT EXPR t NAME t public NN void NN start VB bundle NN root ROOT start dobj start bundle this can contain user code wrap it in case it throws an exception root ROOT contain nsubj contain this aux contain can compound code user nsubj wrap code ccomp contain wrap dobj wrap it mark throws in mwe in case nsubj throws it advcl in case wrap throws det exception an dobj throws exception this can contain user code wrap it in case it throws an exception root ROOT contain nsubj contain this aux contain can compound code user nsubj wrap code ccomp contain wrap dobj wrap it mark throws in mwe in case nsubj throws it advcl in case wrap throws det exception an dobj throws exception try VB invoker NN invoke VBP start NN bundle NN root ROOT invoke nsubj invoke invoker compound bundle start dobj invoke bundle new JJ do VB fn NN start NN bundle NN context NN root ROOT do compound context fn compound context start compound context bundle dobj do context catch NN throwable JJ t NN exception in user code root ROOT exception case code in compound code user nmod in exception code throw VB wrap VB user NN code NN exception NN root ROOT wrap compound exception user compound exception code dobj wrap exception t NN contain catch ANTONYM ANTONYM contain throw ANTONYM ANTONYM contain throws ANTONYM ANTONYM
