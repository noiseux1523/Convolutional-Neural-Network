FUNCTION SPECIFIER protected TYPE void NAME void NAME check PARAMETER LIST BLOCK IF if host get auto deploy check for resources modification to trigger redeployment deployed application apps deployed values to array new deployed application for int i i apps length i if is serviced apps i name check resources apps i false check for old versions of applications that can now be undeployed if host get undeploy old versions check undeploy hotdeploy applications deploy apps CONDITION host get auto deploy EXPR host get auto deploy CALL host get auto deploy NAME host get auto deploy NAME host NAME get auto deploy ARGUMENT LIST THEN check for resources modification to trigger redeployment deployed application apps deployed values to array new deployed application for int i i apps length i if is serviced apps i name check resources apps i false check for old versions of applications that can now be undeployed if host get undeploy old versions check undeploy hotdeploy applications deploy apps BLOCK COMMENT check for resources modification to trigger redeployment DECL STMT TYPE deployed application NAME deployed application NAME deployed application INDEX NAME apps INIT deployed values to array new deployed application EXPR deployed values to array new deployed application CALL deployed values NAME deployed values NAME deployed NAME values ARGUMENT LIST CALL to array new deployed application NAME to array ARGUMENT LIST ARGUMENT EXPR new deployed application NAME deployed application NAME deployed application INDEX EXPR FOR for int i i apps length i if is serviced apps i name check resources apps i false CONTROL int i i apps length i INIT int i TYPE int NAME int NAME i INIT EXPR CONDITION i apps length EXPR i apps length NAME i NAME apps length NAME apps NAME length INCR i EXPR i NAME i BLOCK IF if is serviced apps i name check resources apps i false CONDITION is serviced apps i name EXPR is serviced apps i name CALL is serviced apps i name NAME is serviced ARGUMENT LIST ARGUMENT EXPR apps i name NAME apps i NAME apps INDEX i EXPR i NAME i NAME name THEN check resources apps i false BLOCK EXPR check resources apps i false CALL check resources apps i false NAME check resources ARGUMENT LIST ARGUMENT EXPR apps i NAME apps i NAME apps INDEX i EXPR i NAME i ARGUMENT EXPR false COMMENT check for old versions of applications that can now be undeployed IF if host get undeploy old versions check undeploy CONDITION host get undeploy old versions EXPR host get undeploy old versions CALL host get undeploy old versions NAME host get undeploy old versions NAME host NAME get undeploy old versions ARGUMENT LIST THEN check undeploy BLOCK EXPR check undeploy CALL check undeploy NAME check undeploy ARGUMENT LIST COMMENT hotdeploy applications EXPR deploy apps CALL deploy apps NAME deploy apps ARGUMENT LIST protected VBN void NN check NN if IN host NN get VB auto NN deploy NN root ROOT get nsubj get host compound deploy auto dobj get deploy check for resources modification to trigger redeployment root ROOT check case modification for compound modification resources nmod for check modification mark trigger to acl to check trigger dobj trigger redeployment deployed VBN application NN root ROOT application amod application deployed apps NNS deployed VBN values NNS root ROOT values amod values deployed to TO array NN root ROOT array case array to new JJ deployed VBN application NN root ROOT application amod application deployed for IN int NN i LS i LS apps NNS length NN root ROOT length compound length apps i LS if IN is VBZ serviced VBN root ROOT serviced auxpass serviced is apps NNS i LS name NN check NN resources NNS root ROOT resources compound resources check apps NNS i LS false JJ check for old versions of applications that can now be undeployed root ROOT check case versions for amod versions old nmod for check versions case applications of nmod of versions applications nsubj undeployed applications ref applications that aux undeployed can advmod undeployed now cop undeployed be acl relcl applications undeployed if IN host NN get VB undeploy JJ old JJ versions NNS root ROOT get nsubj get host amod versions undeploy amod versions old dobj get versions check NN undeploy NN root ROOT undeploy compound undeploy check hotdeploy applications root ROOT applications compound applications hotdeploy deploy VB apps NNS root ROOT deploy dobj deploy apps name be ANTONYM ANTONYM new old ANTONYM ANTONYM void false SYNONYM SYNONYM,1
