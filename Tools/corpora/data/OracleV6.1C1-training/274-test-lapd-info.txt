FUNCTION SPECIFIER private TYPE boolean NAME boolean NAME is wildcard PARAMETER LIST char sequence text PARAMETER char sequence text TYPE char sequence NAME char sequence NAME text BLOCK IF if text null text length return false CONDITION text null text length EXPR text null text length NAME text CALL text length NAME text length NAME text NAME length ARGUMENT LIST THEN return false BLOCK RETURN return false EXPR false COMMENT if a un escaped or if found return true COMMENT start at the end since it s more common to put wildcards at the end FOR for int i text length i i if text char at i text char at i unescaped char sequence was escaped text i return true CONTROL int i text length i i INIT int i text length TYPE int NAME int NAME i INIT text length EXPR text length CALL text length NAME text length NAME text NAME length ARGUMENT LIST CONDITION i EXPR i NAME i INCR i EXPR i NAME i BLOCK IF if text char at i text char at i unescaped char sequence was escaped text i return true CONDITION text char at i text char at i unescaped char sequence was escaped text i EXPR text char at i text char at i unescaped char sequence was escaped text i CALL text char at i NAME text char at NAME text NAME char at ARGUMENT LIST ARGUMENT EXPR i NAME i CALL text char at i NAME text char at NAME text NAME char at ARGUMENT LIST ARGUMENT EXPR i NAME i CALL unescaped char sequence was escaped text i NAME unescaped char sequence was escaped NAME unescaped char sequence NAME was escaped ARGUMENT LIST ARGUMENT EXPR text NAME text ARGUMENT EXPR i NAME i THEN return true BLOCK RETURN return true EXPR true RETURN return false EXPR false private JJ boolean NN is VBZ wildcard NN root ROOT wildcard cop wildcard is char NN sequence NN root ROOT sequence compound sequence char text NN if IN text NN null JJ text NN length NN root ROOT length compound length text return NN false JJ if a un escaped or if found return true root ROOT escaped mark escaped if det un a nsubj escaped un nsubj found un cc escaped or mark found if conj or escaped found nmod npmod true return xcomp found true if a un escaped or if found return true root ROOT escaped mark escaped if det un a nsubj escaped un nsubj found un cc escaped or mark found if conj or escaped found nmod npmod true return xcomp found true start at the end since it s more common to put wildcards at the end root ROOT start case end at det end the nmod at start end mark common since nsubj common it nsubj xsubj put it cop common s advmod common more advcl since start common mark put to xcomp common put dobj put wildcards case end at det end the nmod at put end for IN int NN i LS text NN length NN root ROOT length compound length text i LS i LS if IN text NN char NN at IN root ROOT char compound char text dep char at i LS text NN char NN at IN root ROOT char compound char text dep char at i LS unescaped JJ char NN sequence NN was VBD escaped VBN root ROOT escaped amod sequence unescaped compound sequence char nsubjpass escaped sequence auxpass escaped was text NN i LS return NN true JJ return NN false JJ false true ANTONYM ANTONYM found put ANTONYM ANTONYM start end ANTONYM ANTONYM start end ANTONYM ANTONYM null false SYNONYM SYNONYM,0
