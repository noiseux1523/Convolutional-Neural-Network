COMMENT create a self signed x certificate from http bfo com blog odds and ends creating a new x certificate html param dn the x distinguished name eg cn test l london c gb param pair the key pair param days how many days from now the certificate is valid for param algorithm the signing algorithm eg sha with rsa return the self signed certificate throws certificate exception thrown if a security error or an io error occurred FUNCTION SPECIFIER public SPECIFIER static TYPE x certificate NAME x certificate NAME generate certificate PARAMETER LIST string dn key pair pair int days string algorithm PARAMETER string dn TYPE string NAME string NAME dn PARAMETER key pair pair TYPE key pair NAME key pair NAME pair PARAMETER int days TYPE int NAME int NAME days PARAMETER string algorithm TYPE string NAME string NAME algorithm THROWS throws certificate exception ARGUMENT EXPR certificate exception NAME certificate exception BLOCK RETURN return new certificate builder days algorithm generate dn pair EXPR new certificate builder days algorithm generate dn pair CALL certificate builder days algorithm NAME certificate builder ARGUMENT LIST ARGUMENT EXPR days NAME days ARGUMENT EXPR algorithm NAME algorithm CALL generate dn pair NAME generate ARGUMENT LIST ARGUMENT EXPR dn NAME dn ARGUMENT EXPR pair NAME pair create a self signed x certificate root ROOT create det self a nsubj signed self ccomp create signed cc signed x ccomp create certificate conj x signed certificate from http bfo com blog odds and ends creating a new x certificate html root ROOT odds case odds from amod odds http compound odds bfo compound odds com compound odds blog cc odds and aux creating ends conj and odds creating det html a amod html new compound html x compound html certificate dobj creating html param dn the x distinguished name eg cn test l london c gb root ROOT dn nsubj dn param det x the dobj dn x amod name distinguished dep x name compound gb eg compound gb cn compound gb test compound gb l compound gb london compound gb c dep name gb param pair the key pair root ROOT pair compound pair param det pair the amod pair key dep pair pair param days how many days from now the certificate is valid for root ROOT days compound days param advmod many how amod days many dobj valid days case now from nmod from valid now det certificate the nsubj valid certificate cop valid is dep days valid dep valid for param algorithm the signing algorithm eg sha with rsa root ROOT algorithm compound algorithm param det algorithm the compound algorithm signing nsubj sha algorithm advmod sha eg acl relcl algorithm sha case rsa with nmod with sha rsa return the self signed certificate root ROOT signed csubj signed return det self the dobj return self dobj signed certificate throws certificate exception thrown if a security error or an io error occurred root ROOT throws compound exception certificate dobj throws exception acl exception thrown mark occurred if det error a compound error security nsubj occurred error cc error or det error an compound error io conj or error error nsubj occurred error advcl if thrown occurred public NN static JJ x CC certificate NN root ROOT certificate compound certificate x generate VB certificate NN root ROOT generate dobj generate certificate string NN dn NN key JJ pair NN root ROOT pair amod pair key pair NN int NN days NNS string NN algorithm NN throws VBZ certificate NN exception NN root ROOT exception compound exception certificate return NN new JJ certificate NN builder NN root ROOT builder compound builder certificate days NNS algorithm NN generate VB dn NN pair NN create name ANTONYM ANTONYM create thrown ANTONYM ANTONYM create throws ANTONYM ANTONYM creating name ANTONYM ANTONYM creating thrown ANTONYM ANTONYM creating throws ANTONYM ANTONYM distinguished signing ANTONYM ANTONYM ends generate ANTONYM ANTONYM name is ANTONYM ANTONYM name thrown ANTONYM ANTONYM name throws ANTONYM ANTONYM return occurred ANTONYM ANTONYM return thrown ANTONYM ANTONYM return throws ANTONYM ANTONYM signed distinguished ANTONYM ANTONYM thrown generate ANTONYM ANTONYM throws generate ANTONYM ANTONYM l c SYNONYM SYNONYM x c SYNONYM SYNONYM x l SYNONYM SYNONYM,0
